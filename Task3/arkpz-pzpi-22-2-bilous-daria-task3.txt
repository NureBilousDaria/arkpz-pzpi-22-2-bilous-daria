Міністерство освіти і науки України Харківський національний університет радіоелектроніки





Кафедра «Програмної інженерії»







Звіт з лабораторної роботи № 3
з дисципліни: «Аналіз та рефакторинг коду програмного забезпечення» на тему проєкту: «Програмна система для контролю праці співробітників»




Виконала:	Перевірив:
ст. гр. ПЗПІ-22-2	Ст. викладач

Білоус Дар’я Олександрівна	Сокорчук Ігор Петрович











Харків 2024



РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ

Мета

Метою даної лабораторної роботи є розробка бізнес-логіки та функцій адміністрування серверної частини програмної системи.

Хід роботи


В ході виконання лабораторної роботи було реалізовано наступну бізнес логіку (опис інженерних рішень):
Серверна частина відповідає за реалізацію всієї бізнес-логіки програмної системи. Сервер взаємодіє з усіма клієнтськими компонентами через REST API. Для роботи з базою даних використовується ORM Sequelize.
Розглянемо бізнес-логіку авторизації в системі. Авторизація здійснюється за допомогою JSON Web Token (JWT). Токен створюється під час успішної реєстрації або авторизації користувача та містить основну інформацію про нього, яка часто використовується. Тривалість дії токена становить 24 години, після чого користувач має знову авторизуватися в системі.
Ще одним аспектом бізнес-логіки є оформлення підписки на сервіс (див. додаток В). Підписка здійснюється через PayPal API. У разі успішного оформлення для користувача створюється відповідна сутність підписки, яка містить усі необхідні дані. Користувач із активною підпискою може додати до системи своє підприємство (максимум одне).
Також важливим є процес формування оптимального робочого розкладу (див. додаток Г). Для вибору найкращого працівника для виконання конкретної активності використовується метод математичної згортки. Спершу обирається користувач із відповідною освітою, після чого від IoT-пристрою отримуються дані про стан цього працівника (температура, пульс, тривалість роботи). Ця


 інформація, разом із рівнем складності активності, перетворюється на числовий коефіцієнт. Чим більше значення коефіцієнта, тим сильніше воно відхиляється від норми. На основі цих даних формується згортка, і обирається працівник із найбільшим значенням. 
Під час виконання лабораторної роботи також було сформовано UML діаграми діяльності (див.додаток А).
 На діаграмі зображено бізнес-логіку пошуку найбільш підходящого працівника для виконання конкретної активності. Спочатку обирається працівник, після чого перевіряється наявність у нього необхідної освіти. Якщо освіта відсутня, система переходить до наступного кандидата. Далі здійснюється перевірка відповідності фізичного стану працівника вимогам активності. Якщо стан відповідає, працівника призначають на виконання цієї активності. У протилежному випадку система продовжує пошук іншого працівника.
Далі під час виконання лабораторної роботи було сформовано UML діаграму взаємодії (див.додаток Б). 
Побудова діаграми взаємодії дозволяє наочно продемонструвати, як об’єкти системи взаємодіють у межах певного сценарію або випадку використання. Вона відображає послідовність викликів методів та обмін повідомленнями між об’єктами, що сприяє кращому розумінню динамічної поведінки системи.
Робота відбувається наступним чином: IoT-пристрій збирає дані від працівника (пульс, температура, тривалість роботи). Отримані дані відображаються користувачеві та передаються на сервер для подальшої обробки. На сервері ці дані зберігаються у базі даних.

Висновок

Протягом лабораторної роботи мною було розроблено бізнес-логіку та функції адміністрування серверної частини програмної системи. Також було створено UML діаграми діяльності та взаємодії.
Посилання на відео на Ютубі: https://youtu.be/V_3724ZD3iE



ДОДАТОК А
UML діаграма діяльності







ДОДАТОК Б
UML діаграма взаємодії 













ДОДАТОК В
Оформлення підписки


1. export default class SubscriptionClass { 2.
3. private RETURN_URL:string =
4. 'http://localhost:5000/api/public-user/subscribe/succeed';
5. private CANCEL_URL:string =
6. 'http://localhost:5000/api/subscription/pay-pal-cancel- 7.payment';
8. private AUTH: string =
9. Buffer.from(process.env.CLIENT_ID +
10. ':' +
11. process.env.PAY_PAL_SECRET_KEY).toString('base64');
12. private SUBSCRIPTION_PAY_LOAD = {
13. "plan_id": process.env.PLAN_ID,
14. "application_context": {
15. "brand_name": " Subscription",
16. "locale": "en-US",
17. "user_action": "SUBSCRIBE_NOW",
18. "payment_method": {
19. "payer_selected": "PAYPAL",
20. "payee_preferred": 21."IMMEDIATE_PAYMENT_REQUIRED"
22.	},
23. "return_url": this.RETURN_URL,
24. "cancel_url": this.CANCEL_URL
25.	}
26.	}
27.
28.	constructor() {
29.
30.	}
31.
32.	async subscribeRequest() { 33.
34. return await
35. fetch('https://api- 36.m.sandbox.paypal.com/v1/billing/subscriptions', {
37. method: 'post',
38. body: 36.JSON.stringify(this.SUBSCRIPTION_PAY_LOAD),
39. headers: {
40. 'Authorization': 'Basic ' + this.AUTH,
41. 'Content-Type': 'application/json'
42.	},
43.	});
44.	}
45.
46. async isSubscriptionValid(subscribe: Subscribe) {
47. const response = await fetch(


48. `https://api-m.sandbox.paypal.com/v1/ ` + `
49. billing/subscriptions/${subscribe.code}`, {
50. method: 'get',
51. headers: {
52. 'Authorization': 'Basic ' + this.AUTH,
53. 'Content-Type': 'application/json'
54.	}
55.	});
56. const subscriptionDetails = await response.json();
57. console.log(subscriptionDetails.status)
58. return subscriptionDetails.status === 'ACTIVE'
59. || subscriptionDetails.status === 'APPROVAL_PENDING'
60. || subscriptionDetails.status === 'EXPIRED';
61.	}
62. }

Додаток Г
Знаходження найкращого робітника для виконання активності


1. export default class TimeTableManager { 2.
3. private _activities: ActivityDomainModel[];
4. private _scannerHistory: ScannerHistoryDomainModel;
5. private _coefficientsArray!: CoefficientsData[]; 6.
7. constructor(
8. activities: ActivityDomainModel[],
9. scannerHistory: ScannerHistoryDomainModel
10.	) {
11. this._activities = activities;
12. this._scannerHistory = scannerHistory;
13. this._coefficientsArray = 14.this.getCoefficientsArray();
15.	}
16.
17. public getOptimalActivity(): number {
18. const maxCoefficientData = 19.this.getCoefficientsWithMaxData(this._coefficientsArray); 20.
21. ​
22. for (let i = 0; i < this._coefficientsArray.length;
23. i++) {
24. this._coefficientsArray[i].totalCoefficient =
25. ​
26. this._coefficientsArray[i].complexityCoefficient / 27.maxCoefficientData.complexityCoefficient +
28. this._coefficientsArray[i].pulseCoefficient
29. / maxCoefficientData.pulseCoefficient + 30.
31.this._coefficientsArray[i].temperatureCoefficient / 32.maxCoefficientData.temperatureCoefficient +
33.
34.this._coefficientsArray[i].complexityCoefficient / 35.maxCoefficientData.complexityCoefficient;
36.	}
37.
38.	this._coefficientsArray = 39.this._coefficientsArray.sort((a, b) => b.totalCoefficient – 40.a.totalCoefficient);
41.
42. return this._coefficientsArray[0].activityId;
43. ​
44.	}
45.
46. private getCoefficientsArray() {
47. let coefficientsArray: CoefficientsData[] = [];
48. ​
49. for (let i = 0; i < this._activities.length; i++) { 50.
51. let coefficientsData = new CoefficientsData(
52. this._activities[i].id,
53. ​
54. this.getTemperatureCoefficient(this._scannerHistory.temperature), 55.
56.this.getPulseCoefficients(this._scannerHistory.pulse), 57.
58.this.getActiveWorkCoefficients(this._scannerHistory.activeWo 59.rkedTime),
60.	this._activities[i].complexity?.evaluation 45.||
61
62.	);
63.	coefficientsArray.push(coefficientsData);
64.	}
65.
66.	return coefficientsArray;
67.	}
68.
69.	private getTemperatureCoefficient(temperature: number):
70.number {
71.
switch (true) {72.case (temperature<= 36.6):73.return 1;74.case (temperature> 36.6 && temperature <= 37):75.return 1.2;76.case (temperature> 37 && temperature <= 37.5):77.return 1.5;78.case (temperature> 37.5 && temperature <= 38):79.return 2;80.case (temperature> 38 && temperature <= 38.5):81.return 3;82.case (temperature> 38.5 && temperature <= 39):83.return 4;84.default:85.return 5;86.}87.}88.89.private getPulseCoefficients(pulse: number): number {90.switch (true) {91.case (pulse <= 60):92.return 1;93.case (pulse > 60 && pulse <= 80):94.return 1.2;95.case (pulse > 80 && pulse <= 100):96. return 1.5;97. case (pulse > 100 && pulse <= 120):98. return 2;99. case (pulse > 120 && pulse <= 140):100. return 3;
101.case (pulse > 140 && pulse <= 160):102. return 4;103. default:104. return 5;105. }106. }107.108.	private 109.getActiveWorkCoefficients(activeWorkTimeInSeconds: number): 110.number {
111.	const activeWorkTimeInHours = 112.activeWorkTimeInSeconds;
113. switch (true) {
114. case (activeWorkTimeInHours <= 7200):
115. return 1;
116. case (activeWorkTimeInHours > 7200 &&
117. activeWorkTimeInHours <= 14400):
118. return 1.2;
119. case (activeWorkTimeInHours > 14400 &&
120. activeWorkTimeInHours <= 21600):
121. return 1.5;
122. case (activeWorkTimeInHours > 21600 &&
123. activeWorkTimeInHours <= 28800):
124. return 2;
125. case (activeWorkTimeInHours > 28800 &&
126. activeWorkTimeInHours <= 36000):
127. return 3;
128. case (activeWorkTimeInHours > 36000 &&
129. activeWorkTimeInHours <= 43200):
130. return 4;
131. default:
132. return 5;
133.	}
134.	}
135.
136.
137.	private getCoefficientsWithMaxData(coefficientsArray: 138.CoefficientsData[]) {
139. let maxPulseCoefficient = Number.MIN_SAFE_INTEGER;
140. let maxTemperatureCoefficient = 141.Number.MIN_SAFE_INTEGER;
142.	let maxActiveWorkTimeCoefficient = 143.Number.MIN_SAFE_INTEGER;
144.	let maxComplexityCoefficient = 145.Number.MIN_SAFE_INTEGER;
146.
147.	for (let i = 0; i < coefficientsArray.length; i++) 148.{
149.	if (maxPulseCoefficient < 150.coefficientsArray[i].pulseCoefficient) {
151.	maxPulseCoefficient = 152.coefficientsArray[i].pulseCoefficient;
153.	}



154.
155.	if (maxTemperatureCoefficient < 156.coefficientsArray[i].temperatureCoefficient) {
157.	maxTemperatureCoefficient = 158.coefficientsArray[i].temperatureCoefficient;
159.	}
160.
161.	if (maxActiveWorkTimeCoefficient < 162.coefficientsArray[i].workTimeCoefficient) {
163.	maxActiveWorkTimeCoefficient = 164.coefficientsArray[i].workTimeCoefficient;
165.	}
166.
167.	if (maxComplexityCoefficient < 168.coefficientsArray[i].complexityCoefficient) {
169.	maxComplexityCoefficient = 170.coefficientsArray[i].complexityCoefficient;
171.	}
172.	}
173.
174.	return new CoefficientsData(
175.	0,
176. maxTemperatureCoefficient,
177. maxPulseCoefficient,
178. maxActiveWorkTimeCoefficient,
179. maxComplexityCoefficient
180.	);
181.
182.	}
183.
184. }










Додаток Д

Посилання на відео на Ютубі: https://youtu.be/V_3724ZD3iE

